WEB DEVELOPMENT /FRONT END / CLIENT SIDE WEB APP / UI

HTML
   - 'what' contents you want to put on your webpages
   - to define the 'structure' of webpage
CSS
    - 'how' content should appear on the webpage
    - to define 'style rules' for the webpage

JavaScript / ES5
    - scripting language
    - js code is executed by 'JavaScript Engine'
    - every browser has JS Engine
            Chrome  = v8
            firefox = spidermonkey
            IE      = chakra
    - introduced 1997
    - 1997, it was submitted to ECMA for standardization
    - since then, ECMA keeps publishing diff 'specifications'
    - these 'specifications' are implemented by browsers,
        which is called 'ECMAScript'
    - 1997 = ES1
    - 1998 = ES2
    - 1999 = ES3
    - 2009 = ES5
    - 2015 = ES6


    - using JavaScript  
        - ajax calls / http calls
        - DOM manipulation
        - form validation
        - business logic
        - event handling

ES6 / ES2015 / ECMAScript 2015
-------
    - introducted many new features in 
    - i.e. let, const keywords
            spread operators
            rest parameters
            arrow function
            promises/async/await
            proxies
            module system 
            classes/objects
            ...
TypeScript            
    - superset of ES6
    - ++ some additional features   
            i.e. tysype stem
                 oops features
                 generics 
                 decorators
    -browsers cannot execute typescript

JQuery
    - it is javascript library
    - it simplifies the tasks
    - open source/light weight/fast/cross-browser

Bootstrap / SemanticUI
    - CSS library
    - responsive webpages

Angular
----------------
    - front end development
    - UI
    
ES6 tools
------------------
    transpilers
        - Babel 

    bundlers
        - Webpack

language            library/packages             framework

C# / VB             namespace                    .NET
                    net/io/collection

JavaScript          collection/jdbc...          Spring

javascript          jquery/Bootstrap            angularJS
                    react                       vueJS
                                                emberJS

programming         simplifies                  standardize
capabilities        tasks                       process



function arithAdd(a, b){
    return a+b;
}


arithAdd(1,2,3,4,5,6,8);


typescript ------> ES6 (modern js) ---------> legacy  (ES5)
            tsc                      babel                



AngularJS/Angular1.x            Angular2    Angular4        Angular5        Angular6        Angular7        Angular8
2010                            2017        2018            2018            2018            2019            2019
                                Http        4.3 =HttpClient
                                                =Http
based on JS
uses concepts like Controllers

Environment setup for Angular
----------------------------------------------

1. install NodeJS
        - nodejs is execuion Environment for javascript 
        - it comes with 'npm (node package manager)' 

        > node -v 
        > npm -v 

2. download/install appropriate editor 
        - VS code
        - Brackets
        - ATom
        - nodepad++
        - any editor of your choice

3. install Angular-CLI 
    - it is a tool to create/build/deploy/test angular projects          
    > npm install -g @angular/cli
    > ng --version

TypeScript
----------------

    - var, let, const keywords
         - var keyword creates global/function scoped variables 
         - let keyword creates block/function scoped variables
         - const keyword creates block/function scoped variables, but can be assigned only once

    - arrow functions 
        - more abbreviated way of writing functions

    - spread operator (...)

    - rest parameters

    - type system
            primitive types & type inference 
                let x = 10;     //number
                let x: number = 10;

                let x = 'vishal'    //string
                let x:string = 'vishal'

                let x = true          //boolean
                let x:boolean = true

            reference types & inference
                let u1 = {
                    fname: 'vishal',
                    lname : 'shah'
            }

            create a custom object type
                    1. use 'type' keyword
                        type User = {fname:string, lname:string}

                        let u1:User = {
                            fname: 'vishal',
                            lname: 'shah'
                        }
                    2. using interface 
                            interface User {
                                fname: string
                                lname: string
                            }

                            let u1: User = {
                                fname: 'vishal',
                                lname: 'shah'
                            }

Create Angular project
------------------------------------

    > ng new projectname


Directory structure of angular project

myapp1
  |
  |-->e2e
  |     |-> can write / store end to end test cases 
  |     |-> using 'protractor' library we can write e2e test cases 
  |
  |-->node_modules
  |     |-> stores all the dependencies 
  |
  |-->src
  |     |
  |     |-->app
  |     |    |->app.module.ts
  |     |    |->app.component.ts
  |     |    |->app.component.html
  |     |   
  |     |-->assests
  |     |    |-> store your images/static files here
  |     |
  |     |-->environments
  |     |    |-->store env variables 
  |     |    |-->environment.ts
  |     |    |-->environment.prod.ts
  |     |  
  |     |-->index.html
  |     |       |-> index file which will be servered first
  |     |-->main.ts
  |     |       |--> entry of the angular application
  |     |-->styles.css
  |     |       |--> global CSS file
  |
  |-->angular.json
  |     |-->configuration related to angular project  
  |
  |-->tsconfig.json
  |     |-> configuration related to typescript
  |
  |-->package.json
  |     |-> lists all the dependencies
  |     |-> some scripts 
  |
  |-->tslint.json
  |     | specify rules/formats for code
  |


** Every angular app has at least one module, called 'AppModule' == app.module.ts
** a Module is a container, which registers all the components / services/pipes/directives etc. 
** a module bootstraps app's root component 

                App 
                |
----------------------------------------------
Header              Navbar              Courses 
                                          |
                            -------------------------------------
                            SingleCourse  SingleCourse  SingleCourse


Angular Building Blocks
---------------------------------
1. component
        -> a component represents/renders a particular part/patch on the webpage
        -> encapsulates view/data/logic together 

2. Template

3. directives

4. pipes

5. Services 

6. Module

Create a component
-----------------------------------
    1. create a new ts class and annotate using @Component, create a template (html file)

            header.component.ts

            import {Component} from '@angular/core'

            @Component({
                selector: 'app-header',
                templateUrl: 'header.component.html'
            })
            export class HeaderComponent{

            }

    2. register the component in appmodule
